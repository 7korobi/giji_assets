new Mem.Rule("role").schema ->
  role_index = SOW_RECORD.roles
  gift_index = SOW_RECORD.gifts
  order_index = role_index.concat gift_index

  @order "order"

  @scope (all)->
    is: (side)->
      all.where (o)->
        o.side == side && -1 < o.order

    group: (group)->
      all.where (o)->
        o.cmd && o.group == group && -1 < o.order

    hide: ->
      all.where (o)->
        ! o.cmd || o.order < 0

    mob: ->
      all.where (o)->
        o.group == "MOB"

    sow_role: (idx)->
      all.where((o)-> o.role_idx == idx).list().first

    sow_gift: (idx)->
      all.where((o)-> o.gift_idx == idx).list().first


    players: (ids)->
      all
      .where (o)->
        "role" == o.cmd && "robber" != o._id
      .finds(ids)

    humans: (ids)->
      all
      .where((o)-> "HUMAN" == o.group )
      .finds(ids)

    wolfs: (ids)->
      all
      .where((o)-> "WOLF" == o.group )
      .finds(ids)

    minus2: (ids)->
      all
      .where((o)-> o._id in ["hatedevil", "loveangel"] )
      .finds(ids)

    minus1: (ids)->
      all
      .where((o)-> o._id in ["bitch", "fink", "fairy", "ogre"] )
      .finds(ids)

  @default ->

  @deploy (o)->
    o.ables ||= []
    o.HELP ||= ""

    o.role_idx = role_index.indexOf o._id
    o.gift_idx = gift_index.indexOf o._id
    o.order = order_index.indexOf o._id

    o.side = o.group.toLowerCase() if o.group? && o.group != "OTHER"
    o.side = "gift"  if "gift" == o.cmd
    if o.group == "MOB"
      o.side = "mob"
      o.order = 0
    o.side = "other" unless o.side

  @map_reduce (o)->


new Mem.Rule("trap").schema ->
  id_index = SOW_RECORD.events

  @order "order"

  @scope (all)->
    show: ->
      all.where (o)->
        o.cmd == "trap"

    hide: ->
      all.where (o)->
        ! o.cmd || o.order < 0

    sow: (idx)->
      all.where((o)-> o.order == idx).list().first


  @default ->

  @deploy (o)->
    o.order = id_index.indexOf o._id

  @map_reduce (o)->


new Mem.Rule("able").schema ->
  @scope (all)->
    by_rolestate: (bits)->
      masks =
        for mask in all.masks when 0 == bits .&. mask
          bits .|.= mask
          mask
      all.where(mask:masks)

  @default ->

  @deploy (o)->
    o.at = switch o.at
         | "main"     => {         +main                       }
         | "start"    => { +start                              }
         | "progress" => { +start, +main                       }
         | "prologue" => {                +prologue            }
         | "around"   => {                +prologue, +epilogue }
         | "all"      => { +start, +main, +prologue, +epilogue }
         | _          => {                                     }

  @map_reduce (o)->


Mem.rule.able.set <%- JSON.stringify(SET_ABLES) %>
for mask, id of RAILS.maskstates_to_able when o = Mem.ables.find(id)
  o.mask = mask
Mem.ables.masks = _.sortBy Object.keys(RAILS.maskstates_to_able), (i)-> -i

Mem.rule.trap.set <%- JSON.stringify(SET_TRAPS) %>
Mem.rule.role.set <%- JSON.stringify(SET_ROLES) %>
