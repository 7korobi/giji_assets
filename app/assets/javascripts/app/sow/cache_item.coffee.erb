Mem.rule.item.set <%= JSON.generate MESSAGE.sow %>
if gon?.items?
  Mem.rule.item.merge gon.items

<% MESSAGE.module.sow.each do |name| %>
GUI.items_module "<%= name %>"
<% end %>



faceno = 1
index = 10
for rolename in SOW_RECORD.roles
  role = Mem.roles.find(rolename)
  continue unless role

  face_id = "c"
  face_id = "c0" if faceno in [1..10]
  face_id += faceno

  turns = ["start", "main"]
  is_main = false
  for able in role.ables
    continue if able in ["vote", "entrust"]
    is_main ||= Mem.ables.find(able).at.main

  turns = ["main"] if is_main

  for turn in turns
    data =
      mob: "visiter"
      enemy: "evil"
      turn: turn
      face_id: face_id
      _id: "rolelist-form-SAY-#{index}"
      win: role.win || "NONE"
      live: "live"
      role: [rolename]
      rolestate: 0x76f
      sheep: []
      love: null
    Mem.rule.item.merge [data]
    index += 1
  faceno += 1
  faceno += 1 if faceno ==  6
  faceno += 1 if faceno == 10

for rolename in SOW_RECORD.gifts
  role = Mem.roles.find(rolename)
  continue unless role

  for subrole in ["lonewolf"]
    face_id = "c"
    face_id = "c0" if faceno in [1..10]
    face_id += faceno

    villager = Mem.roles.find(subrole)
    data =
      mob: "visiter"
      enemy: "evil"
      turn: "main"
      face_id: face_id
      _id: "rolelist-form-SAY-#{index}"
      win: role.win || villager.win || "NONE"
      live: "live"
      role: [subrole, rolename]
      rolestate: 0x76f
      sheep: []
      love: null
    Mem.rule.item.merge [data]
    index += 1
    faceno += 1

Mem.rule.form.merge Mem.items.where(template: "form").list()
