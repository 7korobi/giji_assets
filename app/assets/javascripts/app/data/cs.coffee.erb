new Cache.Rule("face").schema ->
  @order_by "order"
new Cache.Rule("chr_set").schema ->
new Cache.Rule("chr_npc").schema ->
  @belongs_to "chr_set", dependent: true
  @belongs_to "face", dependent: true
new Cache.Rule("chr_job").schema ->
  @order (o)-> o.face.order
  @belongs_to "chr_set", dependent: true
  @belongs_to "face", dependent: true
  @scope "invalid", (o)->  (not Cache.faces.find[o.face_id]) && o.chr_set_id

Cache.rule.face.set <%= JSON.generate FACE %>

<%
%i[CS_GER CS_MAD CS_SCHOOL CS_SF CS_TIME CS_WA CS_RIRINRA  CS_ANIMAL CS_CHANGED  CS_ALL].each do |const|
  data = Kernel.const_get( const )
 %>
Cache.rule.chr_set.merge [<%= JSON.generate(data.chr_set) %>]
Cache.rule.chr_npc.merge <%= JSON.generate(data.chr_npc) %>
Cache.rule.chr_job.merge <%= JSON.generate(data.chr_job) %>
<%
end
%>
list = []
order = [
  "ririnra"
  "wa"
  "time"
  "sf"
  "mad"
  "ger"
  "changed"
  "animal"
  "school"
]
for face in Cache.faces.all
  chr_set_id = "all"
  face_id = face._id
  _id = "all_#{face_id}"
  faced_jobs = Cache.chr_jobs.face[face_id]
  if faced_jobs?
    job = _.sortBy(faced_jobs, (o)-> order.indexOf o.chr_set_id )?.first?.job
  list.push {chr_set_id, face_id, job, _id} if job?

Cache.rule.chr_job.merge list
