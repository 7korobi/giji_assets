new Mem.Rule("role").schema ->
  role_index = SOW_RECORD.roles
  gift_index = SOW_RECORD.gifts
  order_index = role_index.concat gift_index

  @order "order"

  @scope (all)->
    is: (side)->
      all.where (o)->
        o.side == side && -1 < o.order

    group: (group)->
      all.where (o)->
        o.cmd && o.group == group && -1 < o.order

    hide: ->
      all.where (o)->
        ! o.cmd || o.order < 0

    mob: ->
      all.where (o)->
        o.group == "MOB"

    sow_role: (idx)->
      all.where((o)-> o.role_idx == idx).list.first

    sow_gift: (idx)->
      all.where((o)-> o.gift_idx == idx).list.first

    gift_sides: (ids)->
      all.where (o)->  o.group != "OTHER"
      .finds ids

    gift_appends: (ids)->
      all.where (o)-> o._id in ["decide", "seeronce"]
      .finds ids

    gift_items: (ids)->
      all.where (o)-> o._id in ["glass", "shield"]
      .finds ids

    gift_without_items: (ids)->
      all.where (o)-> not o._id in ["glass", "shield"]
      .finds ids

    players: (ids)->
      all.where (o)-> "role" == o.cmd && "robber" != o._id
      .finds ids

    robbers: (ids)->
      all.where (o)-> "robber" == o._id
      .finds ids

    villagers: (ids)->
      all.where (o)-> "villager" == o._id
      .finds ids

    humans: (ids)->
      all.where (o)-> "HUMAN" == o.group
      .finds ids

    wolfs: (ids)->
      all.where (o)-> "WOLF" == o.group
      .finds ids

    minus2: (ids)->
      all.where (o)-> o._id in ["hatedevil", "loveangel"]
      .finds ids

    minus1: (ids)->
      all.where (o)-> o._id in ["bitch", "fink", "fairy", "ogre"]
      .finds ids

  class @model extends @model
    ->
      @ables ?= []
      @help ?= ""

      @role_idx = role_index.indexOf @_id
      @gift_idx = gift_index.indexOf @_id
      @order   = order_index.indexOf @_id

      @side = @group.toLowerCase() if @group? && @group != "OTHER"
      @side = "gift"  if "gift" == @cmd
      if @group == "MOB"
        @side = "mob"
        @order = 0
      @side = "other" unless @side


new Mem.Rule("trap").schema ->
  id_index = SOW_RECORD.events

  @order "order"

  @scope (all)->
    show: ->
      all.where (o)->
        o.cmd == "trap"

    hide: ->
      all.where (o)->
        ! o.cmd || o.order < 0

    sow: (idx)->
      all.where((o)-> o.order == idx).list.first

  class @model extends @model
    ->
      @order = id_index.indexOf @_id


new Mem.Rule("able").schema ->
  @scope (all)->
    by_rolestate: (bits)->
      masks =
        for mask in all.masks when 0 == bits .&. mask
          bits .|.= mask
          mask
      all.where(mask:masks)

  class @model extends @model
    ->
      @at = switch @at
           | "main"     => {         +main                       }
           | "start"    => { +start                              }
           | "progress" => { +start, +main                       }
           | "prologue" => {                +prologue            }
           | "around"   => {                +prologue, +epilogue }
           | "all"      => { +start, +main, +prologue, +epilogue }
           | _          => {                                     }



Mem.Collection.able.set <%- JSON.stringify(SET_ABLES) %>
for mask, id of RAILS.maskstates_to_able when o = Mem.Query.ables.find(id)
  o.mask = mask
Mem.Query.ables.masks = _.sortBy Object.keys(RAILS.maskstates_to_able), (i)-> -i

Mem.Collection.trap.set <%- JSON.stringify(SET_TRAPS) %>
Mem.Collection.role.set <%- JSON.stringify(SET_ROLES) %>
